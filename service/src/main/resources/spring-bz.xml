<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
       default-autowire="byName">

    <!--加载biz bean 通过xml启动组件扫描 -->
    <context:component-scan base-package="com.fc.service.imp,com.fc.rmi.imp"/>

    <!-- 启用aspectj自动代理 -->
    <aop:aspectj-autoproxy/>

    <!-- 切面bean -->
    <bean id="compactDiscAspect" class="com.fc.aspectj.CompactDiscAspect"/>
    <!-- xml方式声明切面 -->
    <aop:config>
        <aop:aspect ref="compactDiscAspect">
            <aop:pointcut id="play" expression="execution(* com.fc.service.CompactDisc.play(..))"/>
            <aop:before method="silenceCellPhones" pointcut-ref="play"/>
            <aop:after method="applause" pointcut-ref="play"/>
            <aop:after-returning method="applause" pointcut-ref="play"/>
            <aop:after-throwing method="demandRefund" pointcut-ref="play"/>
        </aop:aspect>
    </aop:config>

    <!-- 声明环绕通知 -->
    <!--<aop:config>
        <aop:aspect ref="compactDiscAspect">
            <aop:pointcut id="aroundPlay" expression="execution(* com.fc.service.CompactDisc.play(..))"/>
            <aop:around method="watchPaly" pointcut-ref="aroundPlay"/>
        </aop:aspect>
    </aop:config>-->

    <!-- advisor通知器配置切入点 -->
    <bean id="compactDiscAdvisor" class="com.fc.aspectj.CompactDiscAdvisor"/>
    <aop:config>
        <aop:pointcut id="playAdvisor" expression="execution(* com.fc.service.CompactDisc.play(..))"/>
        <aop:advisor advice-ref="compactDiscAdvisor" pointcut-ref="playAdvisor"/>
    </aop:config>

    <bean class="com.fc.provider.TestProvider" init-method="initMethod">
    </bean>

    <bean id="timeUnit" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
        <property name="staticField" value="java.util.concurrent.TimeUnit.SECONDS" />
    </bean>

    <bean id="linkedBlockingQueue" class="java.util.concurrent.LinkedBlockingQueue">
        <constructor-arg value="10"/>
    </bean>

    <bean id="threadPoolExecutorDef" class="com.fc.provider.ThreadPoolExecutorDef">
        <constructor-arg value="5"/>
        <constructor-arg value="50"/>
        <constructor-arg value="3000"/>
        <constructor-arg ref="timeUnit"/>
        <constructor-arg ref="linkedBlockingQueue"/>
        <constructor-arg ref="threadFactoryNew"/>
        <constructor-arg>
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy"/>
        </constructor-arg>
    </bean>

    <!-- 添加默认实现 -->
    <bean id="threadFactory" class="java.util.concurrent.Executors$DefaultThreadFactory"/>
    <!-- 添加自定义实现 -->
    <bean id="threadFactoryNew" class="com.fc.provider.ThreadFactoryConsumer"/>
    <!-- 创建线程池 -->
    <bean id="userThreadPool" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="5" />
        <property name="maxPoolSize" value="50" />
        <property name="queueCapacity" value="1000" />
        <property name="keepAliveSeconds" value="3000"/>
        <property name="threadFactory" ref="threadFactoryNew"/>
        <property name="rejectedExecutionHandler">
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy"/>
        </property>
    </bean>

    <bean id="testSetBean" class="com.fc.service.imp.TestSetBeanImp"/>

</beans>
